barplotly(table(DS_Data$HarvestTime), "Harvest Time")
barplotly(table(DS_Data$Year), "Year")
barplotly(table(DS_Data$Accession), "Accession")
barplotly(table(DS_Data$Accession), "Size")
barplotly(table(DS_Data$Sections), "Sections")
barplotly(table(DS_Data$Size), "Size")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
boxplotly = function(data, var){
data_var = data[,var]
levels_data = levels(data_var)
fig <- plot_ly(alpha = 0.6, histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_boxplot(x = data$DS[data_var == trace], name = trace)
}
fig <- fig %>% layout(barmode = "overlay",
title = var,
xaxis = list(title = "Dry Matter Content"))
fig
}
boxplotly(DS_Data, "Sections")
boxplotly(DS_Data, "HarvestTime")
boxplotly(DS_Data, "Accession")
boxplotly = function(data, var){
data_var = data[,var]
levels_data = levels(data_var)
fig <- plot_ly(alpha = 0.6, histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_boxplot(x = data$DS[data_var == trace], name = str(trace))
}
fig <- fig %>% layout(barmode = "overlay",
title = var,
xaxis = list(title = "Dry Matter Content"))
fig
}
boxplotly(DS_Data, "Accession")
str(trace)
str(12)
boxplotly = function(data, var){
data_var = data[,var]
levels_data = levels(data_var)
fig <- plot_ly(alpha = 0.6, histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_boxplot(x = data$DS[data_var == trace], name = as.character(trace))
}
fig <- fig %>% layout(barmode = "overlay",
title = var,
xaxis = list(title = "Dry Matter Content"))
fig
}
boxplotly(DS_Data, "Accession")
boxplotly = function(data, var){
data_var = data[,var]
levels_data = levels(data_var)
fig <- plot_ly(alpha = 0.6, histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_boxplot(x = data$DS[data_var == trace], name = paste("Acc", trace))
}
fig <- fig %>% layout(barmode = "overlay",
title = var,
xaxis = list(title = "Dry Matter Content"))
fig
}
boxplotly(DS_Data, "Accession")
library(readxl)
library(dplyr)
library(reshape2)
library(plotly)
barplotly = function(table, name){
fig <- plot_ly(
x = names(table),
y = table,
name = name,
type = "bar"
)
fig <- fig %>% layout(title = name,
xaxis = list(title = name),
yaxis = list(title = "Samples"))
fig
}
col_start_with = function(data, prefix){
colnames(data)[startsWith(colnames(data),prefix)]
}
# initiialize dataframe
data = data.frame()
# loop over all sheets of the Excel Data file
for (i in 1:3){
for (j in 1:3){
# import the data one sheet at a time
imported_data = read_excel("D:/Stage CELOS/Casave Drogestof Proef/Data/CasaveDrogeStofProefInput.xlsx", sheet = paste("O",i," H",j, sep = ""))
# add a column with Harvest Time of the imported data
imported_data$HarvestTime = 9 + i  + (j - 1) * 0.25
# add the repitition as this codes for the location of the
imported_data$Repitition = j
# add the data from one sheet to the rest of the dataframe
data = rbind(data, imported_data)
}
}
rm(imported_data, i, j)
# the variables that are available for with the DS and SG analysis
general_variables = c("Accession", "Year", "HarvestTime", "Repetition", "plant")
# put the data from all the wrias measurements in one column
data_wrias = melt(data,id.vars = general_variables, measure.vars = col_start_with(data,"wrias"), value.name = "wrias", variable.name = "Code")
# remove all variables with NA value for wrias
data_wrias = data_wrias[!is.na(data_wrias$wrias),]
# remove all variables with non numeric values
data_wrias = data_wrias[data_wrias$wrias != "geen",]
#change the data type of the code and wrias columns to numeric
data_wrias$Code = as.numeric(data_wrias$Code)
data_wrias$wrias = as.numeric(data_wrias$wrias)
data_wruws = melt(data,id.vars = general_variables, measure.vars = col_start_with(data,"wruws"), value.name = "wruws", variable.name = "Code")
data_wruws = data_wruws[!is.na(data_wruws$wruws),]
data_wruws = data_wruws[data_wruws$wruws != "geen",]
data_wruws$Code = as.numeric(data_wruws$Code)
SG_Data = merge(data_wrias, data_wruws)
rm(data_wrias, data_wruws)
SG_Data$SG = SG_Data$wrias / (SG_Data$wrias - SG_Data$wruws)
data_fw = melt(data,id.vars = general_variables, measure.vars = col_start_with(data,"fw"), value.name = "fw", variable.name = "PlantGedeelte")
data_fw = data_fw[!is.na(data_fw$fw),]
data_fw$PlantGedeelte = substr(as.character(data_fw$PlantGedeelte),3,6)
data_dw = melt(data,id.vars = general_variables, measure.vars = col_start_with(data,"dw"), value.name = "dw", variable.name = "PlantGedeelte")
data_dw = data_dw[!is.na(data_dw$dw),]
data_dw$PlantGedeelte = substr(as.character(data_dw$PlantGedeelte),3,6)
DS_Data = merge(data_fw, data_dw)
#rm(data_fw, data_dw)
DS_Data$DS = DS_Data$dw / DS_Data$fw * 100
DS_Data = cbind(DS_Data, colsplit(DS_Data$PlantGedeelte,"rs",c("Size","Sections")))
DS_Data$Size = as.factor(DS_Data$Size)
DS_Data$Sections = as.factor(DS_Data$Sections)
DS_Data$Accession = as.factor(DS_Data$Accession)
DS_Data$Year = as.factor(DS_Data$Year)
DS_Data$HarvestTime = as.factor(DS_Data$HarvestTime)
DS_Data = DS_Data[DS_Data$DS < 55]
SG_averaged = aggregate(SG ~ Accession + Year + HarvestTime , SG_Data, mean)
DS_averaged = aggregate(DS ~ Accession + Year + HarvestTime , DS_Data, mean)
DS_SG_Data = merge(SG_averaged, DS_averaged)
#rm(SG_averaged, DS_averaged)
rData = DS_SG_Data[DS_SG_Data$DS < 45,]
rData$HarvestTime2 = rData$HarvestTime^2
rData$AccessionCountry = rData$Accession
rData$AccessionCountry[rData$AccessionCountry != 'col'] = 'sur'
regression = lm(DS ~ SG + AccessionCountry, rData)
summary(regression)
scatter.smooth(rData$HarvestTime,rData$DS)
barplotly(table(DS_Data$HarvestTime), "Harvest Time")
barplotly(table(DS_Data$Year), "Year")
barplotly(table(DS_Data$Accession), "Accession")
barplotly(table(DS_Data$Accession), "Size")
barplotly(table(DS_Data$Sections), "Sections")
barplotly(table(DS_Data$Size), "Size")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
library(readxl)
library(dplyr)
library(reshape2)
library(plotly)
barplotly = function(table, name){
fig <- plot_ly(
x = names(table),
y = table,
name = name,
type = "bar"
)
fig <- fig %>% layout(title = name,
xaxis = list(title = name),
yaxis = list(title = "Samples"))
fig
}
col_start_with = function(data, prefix){
colnames(data)[startsWith(colnames(data),prefix)]
}
# initiialize dataframe
data = data.frame()
# loop over all sheets of the Excel Data file
for (i in 1:3){
for (j in 1:3){
# import the data one sheet at a time
imported_data = read_excel("D:/Stage CELOS/Casave Drogestof Proef/Data/CasaveDrogeStofProefInput.xlsx", sheet = paste("O",i," H",j, sep = ""))
# add a column with Harvest Time of the imported data
imported_data$HarvestTime = 9 + i  + (j - 1) * 0.25
# add the repitition as this codes for the location of the
imported_data$Repitition = j
# add the data from one sheet to the rest of the dataframe
data = rbind(data, imported_data)
}
}
rm(imported_data, i, j)
# the variables that are available for with the DS and SG analysis
general_variables = c("Accession", "Year", "HarvestTime", "Repitition", "plant")
# put the data from all the wrias measurements in one column
data_wrias = melt(data,id.vars = general_variables, measure.vars = col_start_with(data,"wrias"), value.name = "wrias", variable.name = "Code")
# remove all variables with NA value for wrias
data_wrias = data_wrias[!is.na(data_wrias$wrias),]
# remove all variables with non numeric values
data_wrias = data_wrias[data_wrias$wrias != "geen",]
#change the data type of the code and wrias columns to numeric
data_wrias$Code = as.numeric(data_wrias$Code)
data_wrias$wrias = as.numeric(data_wrias$wrias)
data_wruws = melt(data,id.vars = general_variables, measure.vars = col_start_with(data,"wruws"), value.name = "wruws", variable.name = "Code")
data_wruws = data_wruws[!is.na(data_wruws$wruws),]
data_wruws = data_wruws[data_wruws$wruws != "geen",]
data_wruws$Code = as.numeric(data_wruws$Code)
SG_Data = merge(data_wrias, data_wruws)
rm(data_wrias, data_wruws)
SG_Data$SG = SG_Data$wrias / (SG_Data$wrias - SG_Data$wruws)
data_fw = melt(data,id.vars = general_variables, measure.vars = col_start_with(data,"fw"), value.name = "fw", variable.name = "PlantGedeelte")
data_fw = data_fw[!is.na(data_fw$fw),]
data_fw$PlantGedeelte = substr(as.character(data_fw$PlantGedeelte),3,6)
data_dw = melt(data,id.vars = general_variables, measure.vars = col_start_with(data,"dw"), value.name = "dw", variable.name = "PlantGedeelte")
data_dw = data_dw[!is.na(data_dw$dw),]
data_dw$PlantGedeelte = substr(as.character(data_dw$PlantGedeelte),3,6)
DS_Data = merge(data_fw, data_dw)
#rm(data_fw, data_dw)
DS_Data$DS = DS_Data$dw / DS_Data$fw * 100
DS_Data = cbind(DS_Data, colsplit(DS_Data$PlantGedeelte,"rs",c("Size","Sections")))
DS_Data$Size = as.factor(DS_Data$Size)
DS_Data$Sections = as.factor(DS_Data$Sections)
DS_Data$Accession = as.factor(DS_Data$Accession)
DS_Data$Year = as.factor(DS_Data$Year)
DS_Data$HarvestTime = as.factor(DS_Data$HarvestTime)
DS_Data = DS_Data[DS_Data$DS < 55]
SG_averaged = aggregate(SG ~ Accession + Year + HarvestTime , SG_Data, mean)
DS_averaged = aggregate(DS ~ Accession + Year + HarvestTime , DS_Data, mean)
DS_SG_Data = merge(SG_averaged, DS_averaged)
#rm(SG_averaged, DS_averaged)
rData = DS_SG_Data[DS_SG_Data$DS < 45,]
rData$HarvestTime2 = rData$HarvestTime^2
rData$AccessionCountry = rData$Accession
rData$AccessionCountry[rData$AccessionCountry != 'col'] = 'sur'
regression = lm(DS ~ SG + AccessionCountry, rData)
summary(regression)
scatter.smooth(rData$HarvestTime,rData$DS)
barplotly(table(DS_Data$HarvestTime), "Harvest Time")
barplotly(table(DS_Data$Year), "Year")
barplotly(table(DS_Data$Accession), "Accession")
barplotly(table(DS_Data$Accession), "Size")
barplotly(table(DS_Data$Sections), "Sections")
barplotly(table(DS_Data$Size), "Size")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
marginal_plotly(DS_Data, "HarvestTime")
fig <- plot_ly(x = DS_Data$DS,
type = "histogram",
histnorm = "probability")
fig
boxplotly(DS_Data, "Accession")
boxplotly(DS_Data, "Repetition")
boxplotly(DS_Data, "Repitition")
View(DS_Data)
marginal_plotly(DS_Data, "Repitition")
DS_Data$Repitition = as.factor(DS_Data$Repitition)
boxplotly(DS_Data, "Repitition")
marginal_plotly(DS_Data, "Repitition")
marginal_plotly(DS_Data, "Year")
boxplotly(DS_Data, "DS")
hist_plotly = function(data, variable){
fig <- plot_ly(x = data[, variable],
type = "histogram",
histnorm = "probability")
fig
}
marginal_plotly = function(data, variable, goal_var){
data_var = as.factor(data[,variable])
levels_data = levels(data_var)
fig <- plot_ly(alpha = 0.6, histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_histogram(x = data[, goal_var][data_var == trace], name = paste(variable, trace, sep = ": "))
}
fig <- fig %>% layout(barmode = "overlay",
title = variable,
xaxis = list(title = "Dry Matter Content"))
fig
}
boxplotly = function(data, variable, goal_var){
data_var = as.factor(data[,variable])
levels_data = levels(data_var)
fig <- plot_ly(histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_boxplot(x = data[, goal_var][data_var == trace], name = paste(variable, trace, sep = ": "))
}
fig <- fig %>% layout(barmode = "overlay",
title = variable,
xaxis = list(title = "Dry Matter Content"))
fig
}
barplotly = function(data, variable){
table_var = table(data[, variable])
fig <- plot_ly(
x = names(table_var),
y = table_var,
name = variable,
type = "bar"
)
fig <- fig %>% layout(title = variable,
xaxis = list(title = variable),
yaxis = list(title = "Samples"))
fig
}
for (variable in c("HarvestTime", "Year", "Size", "Section", "Accession", "Repitition")){
barplotly(DS_Data, variable)
}
for (variable in c("HarvestTime", "Year", "Size", "Sections", "Accession", "Repitition")){
barplotly(DS_Data, variable)
}
for (variable in c("HarvestTime", "Year", "Size", "Sections", "Accession", "Repitition")){
barplotly(DS_Data, variable)
}
hist_plotly = function(data, variable){
fig <- plot_ly(x = data[, variable],
type = "histogram",
histnorm = "probability")
fig
}
marginal_plotly = function(data, variable, goal_var){
data_var = as.factor(data[,variable])
levels_data = levels(data_var)
fig <- plot_ly(alpha = 0.6, histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_histogram(x = data[, goal_var][data_var == trace], name = paste(variable, trace, sep = ": "))
}
fig <- fig %>% layout(barmode = "overlay",
title = variable,
xaxis = list(title = "Dry Matter Content"))
fig
}
boxplotly = function(data, variable, goal_var){
data_var = as.factor(data[,variable])
levels_data = levels(data_var)
fig <- plot_ly(histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_boxplot(x = data[, goal_var][data_var == trace], name = paste(variable, trace, sep = ": "))
}
fig <- fig %>% layout(barmode = "overlay",
title = variable,
xaxis = list(title = "Dry Matter Content"))
fig
}
barplotly = function(data, variable){
table_var = table(data[, variable])
fig <- plot_ly(
x = names(table_var),
y = table_var,
name = variable,
type = "bar"
)
fig <- fig %>% layout(title = variable,
xaxis = list(title = variable),
yaxis = list(title = "Samples"))
fig
}
for (variable in c("HarvestTime", "Year", "Size", "Sections", "Accession", "Repitition")){
barplotly(DS_Data, variable)
}
hist_plotly = function(data, variable){
fig <- plot_ly(x = data[, variable],
type = "histogram",
histnorm = "probability")
fig
}
marginal_plotly = function(data, variable, goal_var){
data_var = as.factor(data[,variable])
levels_data = levels(data_var)
fig <- plot_ly(alpha = 0.6, histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_histogram(x = data[, goal_var][data_var == trace], name = paste(variable, trace, sep = ": "))
}
fig <- fig %>% layout(barmode = "overlay",
title = variable,
xaxis = list(title = "Dry Matter Content"))
fig
}
boxplotly = function(data, variable, goal_var){
data_var = as.factor(data[,variable])
levels_data = levels(data_var)
fig <- plot_ly(histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_boxplot(x = data[, goal_var][data_var == trace], name = paste(variable, trace, sep = ": "))
}
fig <- fig %>% layout(barmode = "overlay",
title = variable,
xaxis = list(title = "Dry Matter Content"))
fig
}
barplotly = function(data, variable){
table_var = table(data[, variable])
fig <- plot_ly(
x = names(table_var),
y = table_var,
name = variable,
type = "bar"
)
fig <- fig %>% layout(title = variable,
xaxis = list(title = variable),
yaxis = list(title = "Samples"))
print(fig)
}
for (variable in c("HarvestTime", "Year", "Size", "Sections", "Accession", "Repitition")){
barplotly(DS_Data, variable)
}
for (variable in c("Year", "Size")){
marginal_plotly(DS_Data, variable, "DS")
}
hist_plotly = function(data, variable){
fig <- plot_ly(x = data[, variable],
type = "histogram",
histnorm = "probability")
print(fig)
}
marginal_plotly = function(data, variable, goal_var){
data_var = as.factor(data[,variable])
levels_data = levels(data_var)
fig <- plot_ly(alpha = 0.6, histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_histogram(x = data[, goal_var][data_var == trace], name = paste(variable, trace, sep = ": "))
}
fig <- fig %>% layout(barmode = "overlay",
title = variable,
xaxis = list(title = "Dry Matter Content"))
print(fig)
}
boxplotly = function(data, variable, goal_var){
data_var = as.factor(data[,variable])
levels_data = levels(data_var)
fig <- plot_ly(histnorm = "probability")
for (trace in levels_data){
fig <- fig %>% add_boxplot(x = data[, goal_var][data_var == trace], name = paste(variable, trace, sep = ": "))
}
fig <- fig %>% layout(barmode = "overlay",
title = variable,
xaxis = list(title = "Dry Matter Content"))
print(fig)
}
barplotly = function(data, variable){
table_var = table(data[, variable])
fig <- plot_ly(
x = names(table_var),
y = table_var,
name = variable,
type = "bar"
)
fig <- fig %>% layout(title = variable,
xaxis = list(title = variable),
yaxis = list(title = "Samples"))
print(fig)
}
hist_plotly(DS_Data, "DS")
for (variable in c("HarvestTime", "Year", "Size", "Sections", "Accession", "Repitition")){
barplotly(DS_Data, variable)
}
for (variable in c("Year", "Size")){
marginal_plotly(DS_Data, variable, "DS")
}
for (variable in c("HarvestTime", "Year", "Size", "Sections", "Accession", "Repitition")){
boxplotly(DS_Data, variable, "DS")
}
boxplotly = function(data, variable, goal_var){
data_var = as.factor(data[,variable])
levels_data = levels(data_var)
fig <- plot_ly()
for (trace in levels_data){
fig <- fig %>% add_boxplot(x = data[, goal_var][data_var == trace], name = paste(variable, trace, sep = ": "))
}
fig <- fig %>% layout(barmode = "overlay",
title = variable,
xaxis = list(title = "Dry Matter Content"))
print(fig)
}
for (variable in c("HarvestTime", "Year", "Size", "Sections", "Accession", "Repitition")){
boxplotly(DS_Data, variable, "DS")
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("..")
source("./Code/DataImport.R");
source("./Code/VisualizeFunctions.R");
data = import_Proef_Data()
general_variables = c("Accession", "Year", "HarvestTime", "Repetition","Bed", "Plot", "plant")
wrias_data = data_melt(data,"wrias","Sample",general_variables)
wruws_data = data_melt(data,"wruws","Sample",general_variables)
SG_data = merge(wrias_data, wruws_data)
SG_data$SG = SG_data$wrias / (SG_data$wrias - SG_data$wruws)
fw_data = data_melt(data,"fw","SizeSection",general_variables)
dw_data = data_melt(data,"dw","SizeSection",general_variables)
DS_data = merge(fw_data, dw_data)
DS_data$DS = DS_data$dw / DS_data$fw
DS_data$Size = as.factor(substr(DS_data$SizeSection,1,1))
DS_data$Section = as.factor(substr(DS_data$SizeSection,4,4))
DS_data$SizeSection = NULL
DS_data = DS_data[DS_data$fw > 9.75,]
library(plotly)
hist_plotly(data, x, y){
fig = plot_ly(x = data[,x], y = data[,y], type = "histogram")
fig
}
library(plotly)
hist_plotly = function(data, x, y){
fig = plot_ly(x = data[,x], y = data[,y], type = "histogram")
fig
}
library(plotly)
hist_plotly = function(data, var){
fig = plot_ly(x = data[,var], type = "histogram")
fig
}
hist_plotly(DS_data, "DS")
